have rds-version && {
  _aws_apitools_rds_general_options () {
    case ${prev} in
      --aws-credential-file) _filedir; return 0;;
      -C|--ec2-cert-file-path) _filedir; return 0;;
      --connection-timeout) return 0;;
      --delimiter) return 0;;
      -I|--access-key-id) return 0;;
      -K|--ec2-private-key-file-path) _filedir; return 0;;
      --region)
        COMPREPLY=($(compgen -W "ap-northeast-1 ap-southeast-1 ap-southeast-2 eu-west-1 sa-east-1 us-east-1 us-west-1 us-west-2" -- ${cur}))
        return 0
        ;;
      -S|--secret-key) return 0;;
      --service-sig-name)
        COMPREPLY=($(compgen -W "rds" -- ${cur}))
        return 0
        ;;
      -U|--url) return 0;;
    esac
    opts+="${opts:+ }--access-key-id --aws-credential-file --connection-timeout --debug --delimiter --ec2-private-key-file-path --headers --help --quiet --region --secret-key --service-sig-name --show-empty-fields --show-long --show-table --show-xml --url"
    return 1
  }

  _aws_apitools_rds_add_option_to_option_group () {
    case ${prev} in
      -n|--option-name) return 0;;
      --option-group-name) return 0;;
      --port) return 0;;
      -sg|--security-groups) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--option-group-name"
      opts+="${opts:+ }--apply-immediately --option-name --port --security-groups"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_authorize_db_security_group_ingress () {
    case ${prev} in
      --db-security-group-name) return 0;;
      -g|--ec2-security-group-name) return 0;;
      -i|--cidr-ip) return 0;;
      -o|--ec2-security-group-owner-id) return 0;;
      -s|--ec2-security-group-id) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-security-group-name"
      opts+="${opts:+ }--cidr-ip --ec2-security-group-id --ec2-security-group-name --ec2-security-group-owner-id"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_copy_db_snapshot () {
    case ${prev} in
      --source-db-snapshot-identifier) return 0;;
      -t|--target-db-snapshot-identifier) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--source-db-snapshot-identifier"
      opts+="${opts:+ }--target-db-snapshot-identifier"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_create_db_instance () {
    case ${prev} in
      -a|--db-security-groups) return 0;;
      -au|--auto-minor-version-upgrade) return 0;;
      -b|--preferred-backup-window) return 0;;
      -c|--db-instance-class)
      	COMPREPLY=($(compgen -W "db.t1.micro db.m1.small db.m1.medium db.m1.large db.m1.xlarge db.m2.xlarge db.m2.2xlarge db.m2.4xlarge" -- ${cur}))
				return 0
				;;
      -cs|--character-set) return 0;;
		  --db-instance-identifier) return 0;;
      -e|--engine)
      	COMPREPLY=($(compgen -W "MySQL oracle-se1 oracle-se sqlserver-ee sqlserver-se sqlserver-ex sqlserver-web" -- ${cur}))
				return 0;;
      -g|--db-parameter-group-name) return 0;;
      -lm|--license-model)
      	COMPREPLY=($(compgen -W "license-included bring-your-own-license general-public-license" -- ${cur}))
				return 0;;
      -m|--multi-az)
      	COMPREPLY=($(compgen -W "true false" -- ${cur}))
				return 0
				;;
      -n|--db-name) return 0;;
      -og|--option-group) return 0;;
      -p|--master-user-password) return 0;;
      --port) return 0;;
      -r|--backup-retention-period) return 0;;
      -s|--allocated-storage) return 0;;
      -sn|--db-subnet-group-name) return 0;;
      -u|--master-username) return 0;;
      -v|--engine-version) return 0;;
      -w|--preferred-maintenance-window) return 0;;
      -z|--availability-zone) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-instance-identifier"
      opts+="${opts:+ }--allocated-storage --auto-minor-version-upgrade --availability-zone --backup-retention-period --character-set --db-instance-class --db-name --db-parameter-group-name --db-security-groups --db-subnet-group-name --engine --engine-version --license-model --master-user-password --master-username --multi-az --option-group --port --preferred-backup-window --preferred-maintenance-window"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_create_db_instance_read_replica () {
    case ${prev} in
      -au|--auto-minor-version-upgrade) return 0;;
      -c|--db-instance-class)
      	COMPREPLY=($(compgen -W "db.m1.small db.m1.large db.m1.xlarge db.m2.2xlarge db.m2.4xlarge" -- ${cur}))
				return 0
				;;
      --db-instance-identifier) return 0;;
      -og|--option-group) return 0;;
      -p|--port) return 0;;
      -s|--source-db-instance-identifier) return 0;;
      -z|--availability-zone) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-instance-identifier"
      opts+="${opts:+ }--auto-minor-version-upgrade --availability-zone --db-instance-class --option-group --port --source-db-instance-identifier"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_create_db_parameter_group () {
    case ${prev} in
      -d|--description) return 0;;
      --db-parameter-group-name) return 0;;
      -f|--db-parameter-group-family) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-parameter-group-name"
      opts+="${opts:+ }--db-parameter-group-family --description"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_create_db_security_group () {
    case ${prev} in
      -d|--db-security-group-description) return 0;;
      --db-security-group-name) return 0;;
      -v|--ec2-vpc-id) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-security-group-name"
      opts+="${opts:+ }--db-security-group-description --ec2-vpc-id"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_create_db_snapshot () {
    case ${prev} in
      --db-instance-identifier) return 0;;
      -s|--db-snapshot-identifier) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-instance-identifier"
      opts+="${opts:+ }--db-snapshot-identifier"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_create_db_subnet_group () {
    case ${prev} in
      -d|--db-subnet-group-description) return 0;;
      --db-subnet-group-name) return 0;;
      -s|--db-subnet-list) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-subnet-group-name"
      opts+="${opts:+ }--db-subnet-group-description --db-subnet-list"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_create_option_group () {
    case ${prev} in
      -d|--description) return 0;;
      -e|--engine-name) return 0;;
      --option-group-name) return 0;;
      -v|--major-engine-version) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--option-group-name"
      opts+="${opts:+ }--description --engine-name --major-engine-version"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_delete_db_instance () {
    case ${prev} in
      --db-instance-identifier) return 0;;
      --final-db-snapshot-identifier) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-instance-identifier"
      opts+="${opts:+ }--final-db-snapshot-identifier --force --skip-final-snapshot"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_delete_db_parameter_group () {
    case ${prev} in
      --db-parameter-group-name) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-parameter-group-name"
      opts+="${opts:+ }--force"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_delete_db_security_group () {
    case ${prev} in
      --db-security-group-name) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-security-group-name"
      opts+="${opts:+ }--force"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_delete_db_snapshot () {
    case ${prev} in
      --db-snapshot-identifier) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-snapshot-identifier"
      opts+="${opts:+ }--force"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_delete_db_subnet_group () {
		case ${prev} in
			--db-subnet-group-name) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-subnet-group-name"
      opts+="${opts:+ }--force"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_delete_option_group () {
		case ${prev} in
			--option-group-name) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--option-group-name"
      opts+="${opts:+ }--force"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_describe_db_engine_versions () {
    case ${prev} in
      -e|--engine) return 0;;
      -f|--db-parameter-group-family) return 0;;
      --marker) return 0;;
      --max-records) return 0;;
      -v|--engine-version) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--db-parameter-group-family --default-only --engine --engine-version --list-supported-character-sets --marker --max-records"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_describe_db_instances () {
    case ${prev} in
      --db-instance-identifier) return 0;;
      --marker) return 0;;
      --max-records) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-instance-identifier"
      opts+="${opts:+ }--marker --max-records"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_describe_db_parameter_groups () {
    case ${prev} in
      --db-parameter-group-name) return 0;;
      --marker) return 0;;
      --max-records) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-parameter-group-name"
      opts+="${opts:+ }--marker --max-records"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_describe_db_parameters () {
    case ${prev} in
      --db-parameter-group-name) return 0;;
      --marker) return 0;;
      --max-records) return 0;;
      --source)
      	COMPREPLY=($(compgen -W "engine-default system user" -- ${cur}))
				return 0
				;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-parameter-group-name"
      opts+="${opts:+ }--marker --max-records --source"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_describe_db_security_groups () {
    case ${prev} in
      --db-security-group-name) return 0;;
      --marker) return 0;;
      --max-records) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-security-group-name"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_describe_db_snapshots () {
    case ${prev} in
      -i|--db-instance-identifier) return 0;;
      --marker) return 0;;
      --max-records) return 0;;
      -s|--db-snapshot-identifier) return 0;;
      -t|--snapshot-type) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--db-instance-identifier --db-snapshot-identifier --marker --max-records --snapshot-type"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_describe_db_subnet_groups () {
    case ${prev} in
      --db-subnet-group-name) return 0;;
      --marker) return 0;;
      --max-records) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-subnet-group-name"
      opts+="${opts:+ }--marker --max-records"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_describe_engine_default_parameters () {
    case ${prev} in
      --db-parameter-group-family) return 0;;
      --marker) return 0;;
      --max-records) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
	    [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--db-parameter-group-name"
      opts+="${opts:+ }--marker --max-records"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_describe_events () {
    case ${prev} in
      --duration) return 0;;
      --end-time) return 0;;
      --marker) return 0;;
      --max-records) return 0;;
      --source-identifier) return 0;;
      --source-type)
      	COMPREPLY=($(compgen -W "db-instance db-parameter-group db-security-group db-snapshot" -- ${cur}))
				return 0
				;;
      --start-time) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--duration --duration --end-time --end-time --marker --max-records --source-identifier --source-type --start-time --start-time"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_describe_option_group_options () {
    case ${prev} in
      -e|--engine-name) return 0;;
      --marker) return 0;;
      --max-records) return 0;;
      -v|--major-engine-version) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--engine-name --major-engine-version --marker --max-records"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_describe_option_groups () {
    case ${prev} in
      -e|--engine-name) return 0;;
      -g|--option-group-name) return 0;;
      --marker) return 0;;
      --max-records) return 0;;
      -v|--major-engine-version) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--engine-name --major-engine-version --marker --max-records --option-group-name"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_describe_orderable_db_instance_options () {
    case ${prev} in
      -c|--db-instance-class)
      	COMPREPLY=($(compgen -W "db.m1.small db.m1.large db.m1.xlarge db.m2.2xlarge db.m2.4xlarge" -- ${cur}))
				return 0
				;;
      -e|--engine) return 0;;
      -lm|--license-model) return 0;;
      --marker) return 0;;
      --max-records) return 0;;
      -v|--engine-version) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--db-instance-class --engine --engine-version --license-model --marker --max-records"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_describe_reserved_db_instances () {
    case ${prev} in
      -c|--db-instance-class)
      	COMPREPLY=($(compgen -W "db.m1.small db.m1.large db.m1.xlarge db.m2.2xlarge db.m2.4xlarge" -- ${cur}))
				return 0
				;;
      -d|--duration)
      	COMPREPLY=($(compgen -W "1 3 31536000 94608000" -- ${cur}))
				return 0
				;;
      -m|--multi-az)
      	COMPREPLY=($(compgen -W "true false" -- ${cur}))
				return 0
				;;
      --marker) return 0;;
      --max-records) return 0;;
      -o|--reserved-db-instances-offering-id) return 0;;
      -p|--product-description) return 0;;
      -t|--offering-type) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--db-instance-class --duration --marker --max-records --multi-az --offering-type --product-description --reserved-db-instances-offering-id"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_describe_reserved_db_instances_offerings () {
    case ${prev} in
      -c|--db-instance-class)
      	COMPREPLY=($(compgen -W "db.m1.small db.m1.large db.m1.xlarge db.m2.2xlarge db.m2.4xlarge" -- ${cur}))
				return 0
				;;
      -d|--duration)
      	COMPREPLY=($(compgen -W "1 3 31536000 94608000" -- ${cur}))
				return 0
				;;
      -m|--multi-az)
      	COMPREPLY=($(compgen -W "true false" -- ${cur}))
				return 0
				;;
      --marker) return 0;;
      --max-records) return 0;;
      -p|--product-description) return 0;;
      -t|--offering-type) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--db-instance-class --duration --marker --max-records --multi-az --offering-type --product-description"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_modify_db_instance () {
    case ${prev} in
      --allocated-storage) return 0;;
      --allow-major-version-upgrade) return 0;;
      --auto-minor-version-upgrade) return 0;;
      --backup-retention-period) return 0;;
      --db-instance-class) return 0;;
      --db-parameter-group-name) return 0;;
      --db-security-groups) return 0;;
      --engine-version) return 0;;
      --master-user-password) return 0;;
      --multi-az) return 0;;
      --option-group) return 0;;
      --preferred-backup-window) return 0;;
      --preferred-maintenance-window) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--allocated-storage --allow-major-version-upgrade --apply-immediately --auto-minor-version-upgrade --backup-retention-period --db-instance-class --db-parameter-group-name --db-security-groups --engine-version --master-user-password --multi-az --option-group --preferred-backup-window --preferred-maintenance-window"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_modify_db_parameter_group () {
    case ${prev} in
      --parameters) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--parameters"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_modify_db_subnet_group () {
    case ${prev} in
      --db-subnet-group-description) return 0;;
      --db-subnet-list) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--db-subnet-group-description --db-subnet-list"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_purchase_reserved_db_instances_offering () {
    case ${prev} in
      --instance-count) return 0;;
      --reserved-db-instance-id) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--instance-count --reserved-db-instance-id"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_reboot_db_instance () {
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--force-failover"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_remove_option_from_option_group () {
    case ${prev} in
      --options) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--apply-immediately --options"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_reset_db_parameter_group () {
    case ${prev} in
      --parameters) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--parameters --reset-all-parameters"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_restore_db_instance_from_db_snapshot () {
    case ${prev} in
      --auto-minor-version-upgrade) return 0;;
      --availability-zone) return 0;;
      --db-instance-class) return 0;;
      --db-name) return 0;;
      --db-snapshot-identifier) return 0;;
      --db-subnet-group-name) return 0;;
      --engine) return 0;;
      --license-model) return 0;;
      --multi-az) return 0;;
      --option-group) return 0;;
      --port) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--auto-minor-version-upgrade --availability-zone --db-instance-class --db-name --db-snapshot-identifier --db-subnet-group-name --engine --license-model --multi-az --option-group --port"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_restore_db_instance_to_point_in_time () {
    case ${prev} in
      --auto-minor-version-upgrade) return 0;;
      --availability-zone) return 0;;
      --db-instance-class) return 0;;
      --db-name) return 0;;
      --db-subnet-group-name) return 0;;
      --engine) return 0;;
      --license-model) return 0;;
      --multi-az) return 0;;
      --option-group) return 0;;
      --port) return 0;;
      --restore-time) return 0;;
      --source-db-instance-identifier) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--auto-minor-version-upgrade --availability-zone --db-instance-class --db-name --db-subnet-group-name --engine --license-model --multi-az --option-group --port --restore-time --source-db-instance-identifier --use-latest-restorable-time"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds_revoke_db_security_group_ingress () {
    case ${prev} in
      --cidr-ip) return 0;;
      --ec2-security-group-id) return 0;;
      --ec2-security-group-name) return 0;;
      --ec2-security-group-owner-id) return 0;;
    esac
    _aws_apitools_rds_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--cidr-ip --ec2-security-group-id --ec2-security-group-name --ec2-security-group-owner-id"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_rds () {
    local cur prev opts
    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}
    cmd=$(basename ${COMP_WORDS[0]})
    _aws_apitools_${cmd//-/_}
  }

  complete -F _aws_apitools_rds rds-add-option-to-option-group
  complete -F _aws_apitools_rds rds-authorize-db-security-group-ingress
  complete -F _aws_apitools_rds rds-copy-db-snapshot
  complete -F _aws_apitools_rds rds-create-db-instance
  complete -F _aws_apitools_rds rds-create-db-instance-read-replica
  complete -F _aws_apitools_rds rds-create-db-parameter-group
  complete -F _aws_apitools_rds rds-create-db-security-group
  complete -F _aws_apitools_rds rds-create-db-snapshot
  complete -F _aws_apitools_rds rds-create-db-subnet-group
  complete -F _aws_apitools_rds rds-create-option-group
  complete -F _aws_apitools_rds rds-delete-db-instance
  complete -F _aws_apitools_rds rds-delete-db-parameter-group
  complete -F _aws_apitools_rds rds-delete-db-security-group
  complete -F _aws_apitools_rds rds-delete-db-snapshot
  complete -F _aws_apitools_rds rds-delete-db-subnet-group
  complete -F _aws_apitools_rds rds-delete-option-group
  complete -F _aws_apitools_rds rds-describe-db-engine-versions
  complete -F _aws_apitools_rds rds-describe-db-instances
  complete -F _aws_apitools_rds rds-describe-db-parameter-groups
  complete -F _aws_apitools_rds rds-describe-db-parameters
  complete -F _aws_apitools_rds rds-describe-db-security-groups
  complete -F _aws_apitools_rds rds-describe-db-snapshots
  complete -F _aws_apitools_rds rds-describe-db-subnet-groups
  complete -F _aws_apitools_rds rds-describe-engine-default-parameters
  complete -F _aws_apitools_rds rds-describe-events
  complete -F _aws_apitools_rds rds-describe-option-group-options
  complete -F _aws_apitools_rds rds-describe-option-groups
  complete -F _aws_apitools_rds rds-describe-orderable-db-instance-options
  complete -F _aws_apitools_rds rds-describe-reserved-db-instances
  complete -F _aws_apitools_rds rds-describe-reserved-db-instances-offerings
  complete -F _aws_apitools_rds rds-modify-db-instance
  complete -F _aws_apitools_rds rds-modify-db-parameter-group
  complete -F _aws_apitools_rds rds-modify-db-subnet-group
  complete -F _aws_apitools_rds rds-purchase-reserved-db-instances-offering
  complete -F _aws_apitools_rds rds-reboot-db-instance
  complete -F _aws_apitools_rds rds-remove-option-from-option-group
  complete -F _aws_apitools_rds rds-reset-db-parameter-group
  complete -F _aws_apitools_rds rds-restore-db-instance-from-db-snapshot
  complete -F _aws_apitools_rds rds-restore-db-instance-to-point-in-time
  complete -F _aws_apitools_rds rds-revoke-db-security-group-ingress
}
