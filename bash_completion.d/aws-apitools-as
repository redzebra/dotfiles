have as-cmd && {
  _aws_apitools_as_general_options () {
    case ${prev} in
      --aws-credential-file) _filedir; return 0;;
      -C|--ec2-cert-file-path) _filedir; return 0;;
      --connection-timeout) return 0;;
      --delimiter) return 0;;
      -I|--access-key-id) return 0;;
      -K|--ec2-private-key-file-path) _filedir; return 0;;
      --region)
        COMPREPLY=($(compgen -W "ap-northeast-1 ap-southeast-1 ap-southeast-2 eu-west-1 sa-east-1 us-east-1 us-west-1 us-west-2" -- ${cur}))
        return 0
        ;;
      -S|--secret-key) return 0;;
      -U|--url) return 0;;
    esac
    opts+="${opts:+ }--access-key-id --aws-credential-file --connection-timeout --delimiter --ec2-cert-file-path --ec2-private-key-file-path --headers --help --quiet --region --secret-key --show-empty-fields --show-long --show-table --show-xml --url"
    return 1
  }

  _aws_apitools_as_create_auto_scaling_group () {
    case ${prev} in
      --auto-scaling-group) return 0;;
      --default-cooldown) return 0;;
      --desired-capacity) return 0;;
      --grace-period) return 0;;
      --health-check-type)
        COMPREPLY=($(compgen -W "EC2 ELB" -- ${cur}))
        return 0
        ;;
      -l|--launch-configuration) return 0;;
      --load-balancers) return 0;;
      -M|--max-size) return 0;;
      -m|--min-size) return 0;;
      --placement-group) return 0;;
      --tag) return 0;;
      --termination-policies) return 0;;
      --vpc-zone-identifier) return 0;;
      -z|--availability-zones) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--auto-scaling-group"
      opts+="${opts:+ }--availability-zones --default-cooldown --desired-capacity --grace-period --health-check-type --launch-configuration --load-balancers --max-size --min-size --placement-group --tag --vpc-zone-identifier"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_create_launch_config () {
    case ${prev} in
      --launch-config) return 0;;
      --block-device-mapping) return 0;;
      --group) return 0;;
      -i|--image-id) return 0;;
      --iam-instance-profile) return 0;;
      --kernel) return 0;;
      --key) return 0;;
      --ramdisk) return 0;;
      --spot-price) return 0;;
      -t|--instance-type)
        COMPREPLY=($(compgen -W "m1.small m1.medium m1.large m1.xlarge t1.micro m2.xlarge m2.2xlarge m2.4xlarge c1.medium c1.xlarge cc1.4xlarge cc2.8xlarge cg1.4xlarge hi1.4xlarge" -- ${cur}))
        return 0
        ;;
      --user-data) return 0;;
      --user-data-file) _filedir; return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--launch-config"
      opts+="${opts:+ }--block-device-mapping --ebs-optimized --group --iam-instance-profile --image-id --instance-type --kernel --key --monitoring-disabled --monitoring-enabled --ramdisk --spot-price --user-data --user-data-file"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_create_or_update_tags () {
    case ${prev} in
      --tag) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--tag"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_delete_auto_scaling_group () {
    case ${prev} in
      --auto-scaling-group) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--auto-scaling-group"
      opts+="${opts:+ }--force --force-delete"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_delete_launch_config () {
    case ${prev} in
      --launch-config) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--launch-config"
      opts+="${opts:+ }--force"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_delete_notification_configuration () {
    case ${prev} in
      --auto-scaling-group) return 0;;
      --topic-arn) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--auto-scaling-group"
      opts+="${opts:+ }--force --topic-arn"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_delete_policy () {
    case ${prev} in
      -g|--auto-scaling-group) return 0;;
      --name) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--name"
      opts+="${opts:+ }--auto-scaling-group --force"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_delete_scheduled_action () {
    case ${prev} in
      -g|--auto-scaling-group) return 0;;
      --name) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--name"
      opts+="${opts:+ }--auto-scaling-group --force"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_delete_tags () {
    case ${prev} in
      --tag) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--tag"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_describe_adjustment_types () {
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_describe_auto_scaling_groups () {
    case ${prev} in
      --max-records) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--max-records"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_describe_auto_scaling_instances () {
    case ${prev} in
      --max-records) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--max-records"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_describe_auto_scaling_notification_types () {
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_describe_launch_configs () {
    case ${prev} in
      --max-records) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--max-records"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_describe_metric_collection_types () {
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_describe_notification_configurations () {
    case ${prev} in
      -g|--auto-scaling-groups) return 0;;
      --max-records) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--auto-scaling-groups --max-records"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_describe_policies () {
    case ${prev} in
      -g|--auto-scaling-group) return 0;;
      --max-records) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--auto-scaling-group --max-records"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_describe_process_types () {
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_describe_scaling_activities () {
    case ${prev} in
      -g|--auto-scaling-group) return 0;;
      --max-records) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--auto-scaling-group --max-records"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_describe_scheduled_actions () {
    case ${prev} in
      --end-time) return 0;;
      -g|--auto-scaling-group) return 0;;
      --max-records) return 0;;
      --start-time) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--auto-scaling-group --end-time --max-records --start-time"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_describe_tags () {
    case ${prev} in
      -f|--filter) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      opts+="${opts:+ }--filter"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_disable_metrics_collection () {
    case ${prev} in
      --auto-scaling-group) return 0;;
      -m|--metrics) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--auto-scaling-group"
      opts+="${opts:+ }--metrics"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_enable_metrics_collection () {
    case ${prev} in
      -g|--granularity)
        COMPREPLY=($(compgen -W "1Minute" -- ${cur}))
        return 0
        ;;
      -m|--metrics) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--auto-scaling-group"
      opts+="${opts:+ }--granularity --metrics"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_execute_policy () {
    case ${prev} in
      -g|--auto-scaling-group) return 0;;
      --name) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--name"
      opts+="${opts:+ }--auto-scaling-group --honor-cooldown --no-honor-cooldown"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_put_notification_configuration () {
    case ${prev} in
      --auto-scaling-group) return 0;;
      -n|--notification-types) return 0;;
      -t|--topic-arn) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--auto-scaling-group"
      opts+="${opts:+ }--notification-types --topic-arn"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_put_scaling_policy () {
    case ${prev} in
      -a|--adjustment) return 0;;
      --cooldown) return 0;;
      -g|--auto-scaling-group) return 0;;
      --name) return 0;;
      -s|--min-adjustment-step) return 0;;
      -t|--type)
        COMPREPLY=($(compgen -W "ChangeInCapacity ExactCapacity PercentChangeInCapacity" -- ${cur}))
        return 0
        ;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--name"
      opts+="${opts:+ }--adjustment --auto-scaling-group --cooldown --min-adjustment-step --type"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_put_scheduled_update_group_action () {
    case ${prev} in
      -b|--start-time) return 0;;
      --desired-capacity) return 0;;
      -e|--end-time) return 0;;
      -g|--auto-scaling-group) return 0;;
      --max-size) return 0;;
      --min-size) return 0;;
      --name) return 0;;
      -r|--recurrence) return 0;;
      # deprecated
      -t|--time) return 0;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--name"
      opts+="${opts:+ }--auto-scaling-group --desired-capacity --end-time --max-size --min-size --recurrence --start-time --time"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_resume_processes () {
    case ${prev} in
      --auto-scaling-group) return 0;;
      --processes) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--auto-scaling-group"
      opts+="${opts:+ }--processes"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_set_desired_capacity () {
    case ${prev} in
      --auto-scaling-group) return 0;;
      -c|--desired-capacity) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--auto-scaling-group"
      opts+="${opts:+ }--desired-capacity --honor-cooldown --no-honor-cooldown"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_set_instance_health () {
    case ${prev} in
      --instance-id) return 0;;
      -s|--status)
        COMPREPLY=($(compgen -W "Healthy Unhealthy" -- ${cur}))
        return 0
        ;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--instance-id"
      opts+="${opts:+ }--no-respect-grace-period --respect-grace-period --status"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_suspend_processes () {
    case ${prev} in
      --auto-scaling-group) return 0;;
      --processes) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--auto-scaling-group"
      opts+="${opts:+ }--processes"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_terminate_instance_in_auto_scaling_group () {
    case ${prev} in
      --instance) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--instance"
      opts+="${opts:+ }--decrement-desired-capacity --force --no-decrement-desired-capacity"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as_update_auto_scaling_group () {
    case ${prev} in
      --default-cooldown) return 0;;
      --desired-capacity) return 0;;
      --grace-period) return 0;;
      --health-check-type)
        COMPREPLY=($(compgen -W "EC2 ELB" -- ${cur}))
        return 0
        ;;
      --launch-configuration) return 0;;
      --max-size) return 0;;
      --min-size) return 0;;
      --name) return 0;;
      --placement-group) return 0;;
      --vpc-zone-identifier) return 0;;
      -z|--availability-zones) return 0;;
    esac
    _aws_apitools_as_general_options && return 0
    if [[ ${cur} == -* ]]; then
      [[ ${COMP_WORDS[1]} == -* ]] && opts+="${opts:+ }--name"
      opts+="${opts:+ }--availability-zones --default-cooldown --desired-capacity --grace-period --health-check-type --launch-configuration --max-size --min-size --placement-group --vpc-zone-identifier"
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
    fi
  }

  _aws_apitools_as () {
    local cur prev opts
    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}
    cmd=$(basename ${COMP_WORDS[0]})
    _aws_apitools_${cmd//-/_}
  }

  complete -F _aws_apitools_as as-create-auto-scaling-group
  complete -F _aws_apitools_as as-create-launch-config
  complete -F _aws_apitools_as as-create-or-update-tags
  complete -F _aws_apitools_as as-delete-auto-scaling-group
  complete -F _aws_apitools_as as-delete-launch-config
  complete -F _aws_apitools_as as-delete-notification-configuration
  complete -F _aws_apitools_as as-delete-policy
  complete -F _aws_apitools_as as-delete-scheduled-action
  complete -F _aws_apitools_as as-delete-tags
  complete -F _aws_apitools_as as-describe-adjustment-types
  complete -F _aws_apitools_as as-describe-auto-scaling-groups
  complete -F _aws_apitools_as as-describe-auto-scaling-instances
  complete -F _aws_apitools_as as-describe-auto-scaling-notification-types
  complete -F _aws_apitools_as as-describe-launch-configs
  complete -F _aws_apitools_as as-describe-metric-collection-types
  complete -F _aws_apitools_as as-describe-notification-configurations
  complete -F _aws_apitools_as as-describe-policies
  complete -F _aws_apitools_as as-describe-process-types
  complete -F _aws_apitools_as as-describe-scaling-activities
  complete -F _aws_apitools_as as-describe-scheduled-actions
  complete -F _aws_apitools_as as-describe-tags
  complete -F _aws_apitools_as as-disable-metrics-collection
  complete -F _aws_apitools_as as-enable-metrics-collection
  complete -F _aws_apitools_as as-execute-policy
  complete -F _aws_apitools_as as-put-notification-configuration
  complete -F _aws_apitools_as as-put-scaling-policy
  complete -F _aws_apitools_as as-put-scheduled-update-group-action
  complete -F _aws_apitools_as as-resume-processes
  complete -F _aws_apitools_as as-set-desired-capacity
  complete -F _aws_apitools_as as-set-instance-health
  complete -F _aws_apitools_as as-suspend-processes
  complete -F _aws_apitools_as as-terminate-instance-in-auto-scaling-group
  complete -F _aws_apitools_as as-update-auto-scaling-group
}
